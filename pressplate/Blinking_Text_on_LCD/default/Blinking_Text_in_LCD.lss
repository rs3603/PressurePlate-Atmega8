
Blinking_Text_in_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e38  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000e38  00000eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 000000a0  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000151  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000013cf  00000000  00000000  000010a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a57  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000cc2  00000000  00000000  00002ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00003b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000399  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000069e  00000000  00000000  000040ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  0000474b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 43 01 	call	0x286	; 0x286 <main>
  7a:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  82:	66 23       	and	r22, r22
  84:	11 f0       	breq	.+4      	; 0x8a <lcd_write+0x8>
       lcd_rs_high();
  86:	90 9a       	sbi	0x12, 0	; 18
  88:	01 c0       	rjmp	.+2      	; 0x8c <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  8a:	90 98       	cbi	0x12, 0	; 18
    }
    lcd_rw_low();
  8c:	91 98       	cbi	0x12, 1	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
  8e:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
  90:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
  92:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
  94:	8f 9a       	sbi	0x11, 7	; 17
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  96:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  98:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  9a:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  9c:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  9e:	87 fd       	sbrc	r24, 7
  a0:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  a2:	86 fd       	sbrc	r24, 6
  a4:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  a6:	85 fd       	sbrc	r24, 5
  a8:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
  aa:	84 fd       	sbrc	r24, 4
  ac:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  ae:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_write+0x30>
    lcd_e_low();
  b2:	92 98       	cbi	0x12, 2	; 18
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
        lcd_e_toggle();
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
  b4:	97 98       	cbi	0x12, 7	; 18
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
  b6:	96 98       	cbi	0x12, 6	; 18
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
  b8:	95 98       	cbi	0x12, 5	; 18
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
  ba:	94 98       	cbi	0x12, 4	; 18
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  bc:	83 fd       	sbrc	r24, 3
  be:	97 9a       	sbi	0x12, 7	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  c0:	82 fd       	sbrc	r24, 2
  c2:	96 9a       	sbi	0x12, 6	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  c4:	81 fd       	sbrc	r24, 1
  c6:	95 9a       	sbi	0x12, 5	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  c8:	80 fd       	sbrc	r24, 0
  ca:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  cc:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_write+0x4e>
    lcd_e_low();
  d0:	92 98       	cbi	0x12, 2	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
  d2:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
  d4:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
  d6:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
  d8:	97 9a       	sbi	0x12, 7	; 18
    }
}
  da:	08 95       	ret

000000dc <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  dc:	88 23       	and	r24, r24
  de:	11 f0       	breq	.+4      	; 0xe4 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  e0:	90 9a       	sbi	0x12, 0	; 18
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  e4:	90 98       	cbi	0x12, 0	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  e6:	91 9a       	sbi	0x12, 1	; 18
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
  e8:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
  ea:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
  ec:	8e 98       	cbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
  ee:	8f 98       	cbi	0x11, 7	; 17
                
        /* read high nibble first */
        lcd_e_high();
  f0:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();        
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
  f4:	84 9b       	sbis	0x10, 4	; 16
  f6:	02 c0       	rjmp	.+4      	; 0xfc <lcd_read+0x20>
  f8:	80 e1       	ldi	r24, 0x10	; 16
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_read+0x22>
  fc:	80 e0       	ldi	r24, 0x00	; 0
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
  fe:	85 99       	sbic	0x10, 5	; 16
 100:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 102:	86 99       	sbic	0x10, 6	; 16
 104:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 106:	87 99       	sbic	0x10, 7	; 16
 108:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 10a:	92 98       	cbi	0x12, 2	; 18

        lcd_e_delay();                       /* Enable 500ns low       */
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 10e:	92 9a       	sbi	0x12, 2	; 18
        lcd_e_delay();
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 112:	84 99       	sbic	0x10, 4	; 16
 114:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 116:	85 99       	sbic	0x10, 5	; 16
 118:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 11a:	86 99       	sbic	0x10, 6	; 16
 11c:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 11e:	87 99       	sbic	0x10, 7	; 16
 120:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 122:	92 98       	cbi	0x12, 2	; 18
    }
    return data;
}
 124:	08 95       	ret

00000126 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
 12c:	87 fd       	sbrc	r24, 7
 12e:	fb cf       	rjmp	.-10     	; 0x126 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_read>
    
}/* lcd_waitbusy */
 138:	08 95       	ret

0000013a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 13a:	1f 93       	push	r17
 13c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 13e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    lcd_write(cmd,0);
 142:	81 2f       	mov	r24, r17
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 14e:	1f 93       	push	r17
 150:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 152:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    lcd_write(data,1);
 156:	81 2f       	mov	r24, r17
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
}
 15e:	1f 91       	pop	r17
 160:	08 95       	ret

00000162 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 162:	66 23       	and	r22, r22
 164:	11 f4       	brne	.+4      	; 0x16a <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 166:	80 58       	subi	r24, 0x80	; 128
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 16a:	80 54       	subi	r24, 0x40	; 64
 16c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 170:	08 95       	ret

00000172 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 172:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
}
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
}
 180:	08 95       	ret

00000182 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
}
 188:	08 95       	ret

0000018a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 18a:	1f 93       	push	r17
 18c:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 18e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_waitbusy>
    if (c=='\n')
 192:	1a 30       	cpi	r17, 0x0A	; 10
 194:	49 f4       	brne	.+18     	; 0x1a8 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 196:	80 34       	cpi	r24, 0x40	; 64
 198:	10 f0       	brcs	.+4      	; 0x19e <lcd_putc+0x14>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <lcd_putc+0x16>
 19e:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1a0:	80 58       	subi	r24, 0x80	; 128
 1a2:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1a8:	81 2f       	mov	r24, r17
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 41 00 	call	0x82	; 0x82 <lcd_write>
    }

}/* lcd_putc */
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 1bc:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1c0:	89 91       	ld	r24, Y+
 1c2:	88 23       	and	r24, r24
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	ec 01       	movw	r28, r24
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 1d4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_putc>
 1d8:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	84 91       	lpm	r24, Z+
 1de:	88 23       	and	r24, r24
 1e0:	c9 f7       	brne	.-14     	; 0x1d4 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e8:	1f 93       	push	r17
 1ea:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ec:	88 9a       	sbi	0x11, 0	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	89 9a       	sbi	0x11, 1	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f0:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f2:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f4:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f6:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f8:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1fa:	80 ea       	ldi	r24, 0xA0	; 160
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 202:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 204:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 206:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x22>
    lcd_e_low();
 20a:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 20c:	80 ee       	ldi	r24, 0xE0	; 224
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x28>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 214:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
    lcd_e_low();
 218:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcd_init+0x38>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 224:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
    lcd_e_low();
 228:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22a:	fc 01       	movw	r30, r24
 22c:	31 97       	sbiw	r30, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x44>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 230:	94 98       	cbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 232:	92 9a       	sbi	0x12, 2	; 18
    lcd_e_delay();
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x4e>
    lcd_e_low();
 236:	92 98       	cbi	0x12, 2	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x50>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 248:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 24c:	86 e0       	ldi	r24, 0x06	; 6
 24e:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 252:	81 2f       	mov	r24, r17
 254:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_command>

}/* lcd_init */
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <wait>:
#include"lcd.h" //include lcd.h 
#include"lcd.c" //include lcd.c

void wait(float x)
{
for(int i=0;i<(int)(1302*x);i++)
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 ec       	ldi	r19, 0xC0	; 192
 260:	42 ea       	ldi	r20, 0xA2	; 162
 262:	54 e4       	ldi	r21, 0x44	; 68
 264:	0e 94 a7 01 	call	0x34e	; 0x34e <__mulsf3>
 268:	0e 94 a1 02 	call	0x542	; 0x542 <__fixsfsi>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	05 c0       	rjmp	.+10     	; 0x27e <wait+0x22>
 274:	48 2f       	mov	r20, r24
 276:	4a 95       	dec	r20
 278:	f1 f7       	brne	.-4      	; 0x276 <wait+0x1a>
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	3f 4f       	sbci	r19, 0xFF	; 255
 27e:	26 17       	cp	r18, r22
 280:	37 07       	cpc	r19, r23
 282:	c4 f3       	brlt	.-16     	; 0x274 <wait+0x18>
_delay_loop_1(0);
}
 284:	08 95       	ret

00000286 <main>:


int main (void)
{
 286:	9f 92       	push	r9
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	df 93       	push	r29
 29a:	cf 93       	push	r28
 29c:	00 d0       	rcall	.+0      	; 0x29e <main+0x18>
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <main+0x1a>
 2a0:	0f 92       	push	r0
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
lcd_init(LCD_DISP_ON);
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
 2ac:	00 e0       	ldi	r16, 0x00	; 0
 2ae:	10 e0       	ldi	r17, 0x00	; 0

//lcd_puts("Hello world");
for(int j=0;j<=2;j++)
{
y=j/2;
sprintf(buffer,"%4d",y);
 2b0:	7e 01       	movw	r14, r28
 2b2:	08 94       	sec
 2b4:	e1 1c       	adc	r14, r1
 2b6:	f1 1c       	adc	r15, r1
 2b8:	40 e6       	ldi	r20, 0x60	; 96
 2ba:	a4 2e       	mov	r10, r20
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	b4 2e       	mov	r11, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c0:	36 e0       	ldi	r19, 0x06	; 6
 2c2:	c3 2e       	mov	r12, r19
 2c4:	39 ef       	ldi	r19, 0xF9	; 249
 2c6:	d3 2e       	mov	r13, r19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2c8:	99 24       	eor	r9, r9
 2ca:	25 c0       	rjmp	.+74     	; 0x316 <main+0x90>
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <main+0x48>
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <main+0x4a>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <main+0x4c>
 2d2:	ed b7       	in	r30, 0x3d	; 61
 2d4:	fe b7       	in	r31, 0x3e	; 62
 2d6:	31 96       	adiw	r30, 0x01	; 1
 2d8:	ad b7       	in	r26, 0x3d	; 61
 2da:	be b7       	in	r27, 0x3e	; 62
 2dc:	12 96       	adiw	r26, 0x02	; 2
 2de:	fc 92       	st	X, r15
 2e0:	ee 92       	st	-X, r14
 2e2:	11 97       	sbiw	r26, 0x01	; 1
 2e4:	b3 82       	std	Z+3, r11	; 0x03
 2e6:	a2 82       	std	Z+2, r10	; 0x02
 2e8:	c8 01       	movw	r24, r16
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	95 83       	std	Z+5, r25	; 0x05
 2f0:	84 83       	std	Z+4, r24	; 0x04
 2f2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <sprintf>
lcd_puts(buffer);
 2f6:	8d b7       	in	r24, 0x3d	; 61
 2f8:	9e b7       	in	r25, 0x3e	; 62
 2fa:	06 96       	adiw	r24, 0x06	; 6
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	9e bf       	out	0x3e, r25	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	8d bf       	out	0x3d, r24	; 61
 306:	c7 01       	movw	r24, r14
 308:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_puts>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30c:	c6 01       	movw	r24, r12
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x88>
char buffer[5];
int y;
while(1){

//lcd_puts("Hello world");
for(int j=0;j<=2;j++)
 312:	0f 5f       	subi	r16, 0xFF	; 255
 314:	1f 4f       	sbci	r17, 0xFF	; 255
 316:	03 30       	cpi	r16, 0x03	; 3
 318:	11 05       	cpc	r17, r1
 31a:	c4 f2       	brlt	.-80     	; 0x2cc <main+0x46>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 320:	29 2d       	mov	r18, r9
 322:	2a 95       	dec	r18
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x9c>
#include"lcd.h" //include lcd.h 
#include"lcd.c" //include lcd.c

void wait(float x)
{
for(int i=0;i<(int)(1302*x);i++)
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	a5 e0       	ldi	r26, 0x05	; 5
 32a:	86 31       	cpi	r24, 0x16	; 22
 32c:	9a 07       	cpc	r25, r26
 32e:	c1 f7       	brne	.-16     	; 0x320 <main+0x9a>
}
//make text static for some time
wait(1);


lcd_clrscr();
 330:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_clrscr>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	29 2d       	mov	r18, r9
 33a:	2a 95       	dec	r18
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0xb4>
#include"lcd.h" //include lcd.h 
#include"lcd.c" //include lcd.c

void wait(float x)
{
for(int i=0;i<(int)(1302*x);i++)
 33e:	01 96       	adiw	r24, 0x01	; 1
 340:	b5 e0       	ldi	r27, 0x05	; 5
 342:	86 31       	cpi	r24, 0x16	; 22
 344:	9b 07       	cpc	r25, r27
 346:	c1 f7       	brne	.-16     	; 0x338 <main+0xb2>
 348:	00 e0       	ldi	r16, 0x00	; 0
 34a:	10 e0       	ldi	r17, 0x00	; 0
 34c:	e4 cf       	rjmp	.-56     	; 0x316 <main+0x90>

0000034e <__mulsf3>:
 34e:	a0 e2       	ldi	r26, 0x20	; 32
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	ed ea       	ldi	r30, 0xAD	; 173
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	0c 94 42 04 	jmp	0x884	; 0x884 <__prologue_saves__>
 35a:	69 83       	std	Y+1, r22	; 0x01
 35c:	7a 83       	std	Y+2, r23	; 0x02
 35e:	8b 83       	std	Y+3, r24	; 0x03
 360:	9c 83       	std	Y+4, r25	; 0x04
 362:	2d 83       	std	Y+5, r18	; 0x05
 364:	3e 83       	std	Y+6, r19	; 0x06
 366:	4f 83       	std	Y+7, r20	; 0x07
 368:	58 87       	std	Y+8, r21	; 0x08
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	be 01       	movw	r22, r28
 370:	67 5f       	subi	r22, 0xF7	; 247
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	0e 94 ca 03 	call	0x794	; 0x794 <__unpack_f>
 378:	ce 01       	movw	r24, r28
 37a:	05 96       	adiw	r24, 0x05	; 5
 37c:	be 01       	movw	r22, r28
 37e:	6f 5e       	subi	r22, 0xEF	; 239
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	0e 94 ca 03 	call	0x794	; 0x794 <__unpack_f>
 386:	99 85       	ldd	r25, Y+9	; 0x09
 388:	92 30       	cpi	r25, 0x02	; 2
 38a:	88 f0       	brcs	.+34     	; 0x3ae <__mulsf3+0x60>
 38c:	89 89       	ldd	r24, Y+17	; 0x11
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	c8 f0       	brcs	.+50     	; 0x3c4 <__mulsf3+0x76>
 392:	94 30       	cpi	r25, 0x04	; 4
 394:	19 f4       	brne	.+6      	; 0x39c <__mulsf3+0x4e>
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	51 f4       	brne	.+20     	; 0x3ae <__mulsf3+0x60>
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <__mulsf3+0x56>
 39c:	84 30       	cpi	r24, 0x04	; 4
 39e:	29 f4       	brne	.+10     	; 0x3aa <__mulsf3+0x5c>
 3a0:	92 30       	cpi	r25, 0x02	; 2
 3a2:	81 f4       	brne	.+32     	; 0x3c4 <__mulsf3+0x76>
 3a4:	84 e6       	ldi	r24, 0x64	; 100
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	c6 c0       	rjmp	.+396    	; 0x536 <__stack+0xd7>
 3aa:	92 30       	cpi	r25, 0x02	; 2
 3ac:	49 f4       	brne	.+18     	; 0x3c0 <__mulsf3+0x72>
 3ae:	20 e0       	ldi	r18, 0x00	; 0
 3b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3b2:	8a 89       	ldd	r24, Y+18	; 0x12
 3b4:	98 13       	cpse	r25, r24
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	2a 87       	std	Y+10, r18	; 0x0a
 3ba:	ce 01       	movw	r24, r28
 3bc:	09 96       	adiw	r24, 0x09	; 9
 3be:	bb c0       	rjmp	.+374    	; 0x536 <__stack+0xd7>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <__mulsf3+0x88>
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c8:	8a 89       	ldd	r24, Y+18	; 0x12
 3ca:	98 13       	cpse	r25, r24
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	2a 8b       	std	Y+18, r18	; 0x12
 3d0:	ce 01       	movw	r24, r28
 3d2:	41 96       	adiw	r24, 0x11	; 17
 3d4:	b0 c0       	rjmp	.+352    	; 0x536 <__stack+0xd7>
 3d6:	2d 84       	ldd	r2, Y+13	; 0x0d
 3d8:	3e 84       	ldd	r3, Y+14	; 0x0e
 3da:	4f 84       	ldd	r4, Y+15	; 0x0f
 3dc:	58 88       	ldd	r5, Y+16	; 0x10
 3de:	6d 88       	ldd	r6, Y+21	; 0x15
 3e0:	7e 88       	ldd	r7, Y+22	; 0x16
 3e2:	8f 88       	ldd	r8, Y+23	; 0x17
 3e4:	98 8c       	ldd	r9, Y+24	; 0x18
 3e6:	ee 24       	eor	r14, r14
 3e8:	ff 24       	eor	r15, r15
 3ea:	87 01       	movw	r16, r14
 3ec:	aa 24       	eor	r10, r10
 3ee:	bb 24       	eor	r11, r11
 3f0:	65 01       	movw	r12, r10
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	e0 e0       	ldi	r30, 0x00	; 0
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	c1 01       	movw	r24, r2
 400:	81 70       	andi	r24, 0x01	; 1
 402:	90 70       	andi	r25, 0x00	; 0
 404:	89 2b       	or	r24, r25
 406:	e9 f0       	breq	.+58     	; 0x442 <__mulsf3+0xf4>
 408:	e6 0c       	add	r14, r6
 40a:	f7 1c       	adc	r15, r7
 40c:	08 1d       	adc	r16, r8
 40e:	19 1d       	adc	r17, r9
 410:	9a 01       	movw	r18, r20
 412:	ab 01       	movw	r20, r22
 414:	2a 0d       	add	r18, r10
 416:	3b 1d       	adc	r19, r11
 418:	4c 1d       	adc	r20, r12
 41a:	5d 1d       	adc	r21, r13
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	a0 e0       	ldi	r26, 0x00	; 0
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e6 14       	cp	r14, r6
 426:	f7 04       	cpc	r15, r7
 428:	08 05       	cpc	r16, r8
 42a:	19 05       	cpc	r17, r9
 42c:	20 f4       	brcc	.+8      	; 0x436 <__mulsf3+0xe8>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ba 01       	movw	r22, r20
 438:	a9 01       	movw	r20, r18
 43a:	48 0f       	add	r20, r24
 43c:	59 1f       	adc	r21, r25
 43e:	6a 1f       	adc	r22, r26
 440:	7b 1f       	adc	r23, r27
 442:	aa 0c       	add	r10, r10
 444:	bb 1c       	adc	r11, r11
 446:	cc 1c       	adc	r12, r12
 448:	dd 1c       	adc	r13, r13
 44a:	97 fe       	sbrs	r9, 7
 44c:	08 c0       	rjmp	.+16     	; 0x45e <__mulsf3+0x110>
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	a0 e0       	ldi	r26, 0x00	; 0
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	a8 2a       	or	r10, r24
 458:	b9 2a       	or	r11, r25
 45a:	ca 2a       	or	r12, r26
 45c:	db 2a       	or	r13, r27
 45e:	31 96       	adiw	r30, 0x01	; 1
 460:	e0 32       	cpi	r30, 0x20	; 32
 462:	f1 05       	cpc	r31, r1
 464:	49 f0       	breq	.+18     	; 0x478 <__stack+0x19>
 466:	66 0c       	add	r6, r6
 468:	77 1c       	adc	r7, r7
 46a:	88 1c       	adc	r8, r8
 46c:	99 1c       	adc	r9, r9
 46e:	56 94       	lsr	r5
 470:	47 94       	ror	r4
 472:	37 94       	ror	r3
 474:	27 94       	ror	r2
 476:	c3 cf       	rjmp	.-122    	; 0x3fe <__mulsf3+0xb0>
 478:	fa 85       	ldd	r31, Y+10	; 0x0a
 47a:	ea 89       	ldd	r30, Y+18	; 0x12
 47c:	2b 89       	ldd	r18, Y+19	; 0x13
 47e:	3c 89       	ldd	r19, Y+20	; 0x14
 480:	8b 85       	ldd	r24, Y+11	; 0x0b
 482:	9c 85       	ldd	r25, Y+12	; 0x0c
 484:	28 0f       	add	r18, r24
 486:	39 1f       	adc	r19, r25
 488:	2e 5f       	subi	r18, 0xFE	; 254
 48a:	3f 4f       	sbci	r19, 0xFF	; 255
 48c:	17 c0       	rjmp	.+46     	; 0x4bc <__stack+0x5d>
 48e:	ca 01       	movw	r24, r20
 490:	81 70       	andi	r24, 0x01	; 1
 492:	90 70       	andi	r25, 0x00	; 0
 494:	89 2b       	or	r24, r25
 496:	61 f0       	breq	.+24     	; 0x4b0 <__stack+0x51>
 498:	16 95       	lsr	r17
 49a:	07 95       	ror	r16
 49c:	f7 94       	ror	r15
 49e:	e7 94       	ror	r14
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	a0 e0       	ldi	r26, 0x00	; 0
 4a6:	b0 e8       	ldi	r27, 0x80	; 128
 4a8:	e8 2a       	or	r14, r24
 4aa:	f9 2a       	or	r15, r25
 4ac:	0a 2b       	or	r16, r26
 4ae:	1b 2b       	or	r17, r27
 4b0:	76 95       	lsr	r23
 4b2:	67 95       	ror	r22
 4b4:	57 95       	ror	r21
 4b6:	47 95       	ror	r20
 4b8:	2f 5f       	subi	r18, 0xFF	; 255
 4ba:	3f 4f       	sbci	r19, 0xFF	; 255
 4bc:	77 fd       	sbrc	r23, 7
 4be:	e7 cf       	rjmp	.-50     	; 0x48e <__stack+0x2f>
 4c0:	0c c0       	rjmp	.+24     	; 0x4da <__stack+0x7b>
 4c2:	44 0f       	add	r20, r20
 4c4:	55 1f       	adc	r21, r21
 4c6:	66 1f       	adc	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	17 fd       	sbrc	r17, 7
 4cc:	41 60       	ori	r20, 0x01	; 1
 4ce:	ee 0c       	add	r14, r14
 4d0:	ff 1c       	adc	r15, r15
 4d2:	00 1f       	adc	r16, r16
 4d4:	11 1f       	adc	r17, r17
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	30 40       	sbci	r19, 0x00	; 0
 4da:	40 30       	cpi	r20, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	59 07       	cpc	r21, r25
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	69 07       	cpc	r22, r25
 4e4:	90 e4       	ldi	r25, 0x40	; 64
 4e6:	79 07       	cpc	r23, r25
 4e8:	60 f3       	brcs	.-40     	; 0x4c2 <__stack+0x63>
 4ea:	2b 8f       	std	Y+27, r18	; 0x1b
 4ec:	3c 8f       	std	Y+28, r19	; 0x1c
 4ee:	db 01       	movw	r26, r22
 4f0:	ca 01       	movw	r24, r20
 4f2:	8f 77       	andi	r24, 0x7F	; 127
 4f4:	90 70       	andi	r25, 0x00	; 0
 4f6:	a0 70       	andi	r26, 0x00	; 0
 4f8:	b0 70       	andi	r27, 0x00	; 0
 4fa:	80 34       	cpi	r24, 0x40	; 64
 4fc:	91 05       	cpc	r25, r1
 4fe:	a1 05       	cpc	r26, r1
 500:	b1 05       	cpc	r27, r1
 502:	61 f4       	brne	.+24     	; 0x51c <__stack+0xbd>
 504:	47 fd       	sbrc	r20, 7
 506:	0a c0       	rjmp	.+20     	; 0x51c <__stack+0xbd>
 508:	e1 14       	cp	r14, r1
 50a:	f1 04       	cpc	r15, r1
 50c:	01 05       	cpc	r16, r1
 50e:	11 05       	cpc	r17, r1
 510:	29 f0       	breq	.+10     	; 0x51c <__stack+0xbd>
 512:	40 5c       	subi	r20, 0xC0	; 192
 514:	5f 4f       	sbci	r21, 0xFF	; 255
 516:	6f 4f       	sbci	r22, 0xFF	; 255
 518:	7f 4f       	sbci	r23, 0xFF	; 255
 51a:	40 78       	andi	r20, 0x80	; 128
 51c:	1a 8e       	std	Y+26, r1	; 0x1a
 51e:	fe 17       	cp	r31, r30
 520:	11 f0       	breq	.+4      	; 0x526 <__stack+0xc7>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	8a 8f       	std	Y+26, r24	; 0x1a
 526:	4d 8f       	std	Y+29, r20	; 0x1d
 528:	5e 8f       	std	Y+30, r21	; 0x1e
 52a:	6f 8f       	std	Y+31, r22	; 0x1f
 52c:	78 a3       	std	Y+32, r23	; 0x20
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	89 8f       	std	Y+25, r24	; 0x19
 532:	ce 01       	movw	r24, r28
 534:	49 96       	adiw	r24, 0x19	; 25
 536:	0e 94 f5 02 	call	0x5ea	; 0x5ea <__pack_f>
 53a:	a0 96       	adiw	r28, 0x20	; 32
 53c:	e2 e1       	ldi	r30, 0x12	; 18
 53e:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__epilogue_restores__>

00000542 <__fixsfsi>:
 542:	ac e0       	ldi	r26, 0x0C	; 12
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	e7 ea       	ldi	r30, 0xA7	; 167
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__prologue_saves__+0x20>
 54e:	69 83       	std	Y+1, r22	; 0x01
 550:	7a 83       	std	Y+2, r23	; 0x02
 552:	8b 83       	std	Y+3, r24	; 0x03
 554:	9c 83       	std	Y+4, r25	; 0x04
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	be 01       	movw	r22, r28
 55c:	6b 5f       	subi	r22, 0xFB	; 251
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	0e 94 ca 03 	call	0x794	; 0x794 <__unpack_f>
 564:	8d 81       	ldd	r24, Y+5	; 0x05
 566:	82 30       	cpi	r24, 0x02	; 2
 568:	61 f1       	breq	.+88     	; 0x5c2 <__fixsfsi+0x80>
 56a:	82 30       	cpi	r24, 0x02	; 2
 56c:	50 f1       	brcs	.+84     	; 0x5c2 <__fixsfsi+0x80>
 56e:	84 30       	cpi	r24, 0x04	; 4
 570:	21 f4       	brne	.+8      	; 0x57a <__fixsfsi+0x38>
 572:	8e 81       	ldd	r24, Y+6	; 0x06
 574:	88 23       	and	r24, r24
 576:	51 f1       	breq	.+84     	; 0x5cc <__fixsfsi+0x8a>
 578:	2e c0       	rjmp	.+92     	; 0x5d6 <__fixsfsi+0x94>
 57a:	2f 81       	ldd	r18, Y+7	; 0x07
 57c:	38 85       	ldd	r19, Y+8	; 0x08
 57e:	37 fd       	sbrc	r19, 7
 580:	20 c0       	rjmp	.+64     	; 0x5c2 <__fixsfsi+0x80>
 582:	6e 81       	ldd	r22, Y+6	; 0x06
 584:	2f 31       	cpi	r18, 0x1F	; 31
 586:	31 05       	cpc	r19, r1
 588:	1c f0       	brlt	.+6      	; 0x590 <__fixsfsi+0x4e>
 58a:	66 23       	and	r22, r22
 58c:	f9 f0       	breq	.+62     	; 0x5cc <__fixsfsi+0x8a>
 58e:	23 c0       	rjmp	.+70     	; 0x5d6 <__fixsfsi+0x94>
 590:	8e e1       	ldi	r24, 0x1E	; 30
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	82 1b       	sub	r24, r18
 596:	93 0b       	sbc	r25, r19
 598:	29 85       	ldd	r18, Y+9	; 0x09
 59a:	3a 85       	ldd	r19, Y+10	; 0x0a
 59c:	4b 85       	ldd	r20, Y+11	; 0x0b
 59e:	5c 85       	ldd	r21, Y+12	; 0x0c
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__fixsfsi+0x68>
 5a2:	56 95       	lsr	r21
 5a4:	47 95       	ror	r20
 5a6:	37 95       	ror	r19
 5a8:	27 95       	ror	r18
 5aa:	8a 95       	dec	r24
 5ac:	d2 f7       	brpl	.-12     	; 0x5a2 <__fixsfsi+0x60>
 5ae:	66 23       	and	r22, r22
 5b0:	b1 f0       	breq	.+44     	; 0x5de <__fixsfsi+0x9c>
 5b2:	50 95       	com	r21
 5b4:	40 95       	com	r20
 5b6:	30 95       	com	r19
 5b8:	21 95       	neg	r18
 5ba:	3f 4f       	sbci	r19, 0xFF	; 255
 5bc:	4f 4f       	sbci	r20, 0xFF	; 255
 5be:	5f 4f       	sbci	r21, 0xFF	; 255
 5c0:	0e c0       	rjmp	.+28     	; 0x5de <__fixsfsi+0x9c>
 5c2:	20 e0       	ldi	r18, 0x00	; 0
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	09 c0       	rjmp	.+18     	; 0x5de <__fixsfsi+0x9c>
 5cc:	2f ef       	ldi	r18, 0xFF	; 255
 5ce:	3f ef       	ldi	r19, 0xFF	; 255
 5d0:	4f ef       	ldi	r20, 0xFF	; 255
 5d2:	5f e7       	ldi	r21, 0x7F	; 127
 5d4:	04 c0       	rjmp	.+8      	; 0x5de <__fixsfsi+0x9c>
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	50 e8       	ldi	r21, 0x80	; 128
 5de:	b9 01       	movw	r22, r18
 5e0:	ca 01       	movw	r24, r20
 5e2:	2c 96       	adiw	r28, 0x0c	; 12
 5e4:	e2 e0       	ldi	r30, 0x02	; 2
 5e6:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__epilogue_restores__+0x20>

000005ea <__pack_f>:
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	fc 01       	movw	r30, r24
 5f6:	e4 80       	ldd	r14, Z+4	; 0x04
 5f8:	f5 80       	ldd	r15, Z+5	; 0x05
 5fa:	06 81       	ldd	r16, Z+6	; 0x06
 5fc:	17 81       	ldd	r17, Z+7	; 0x07
 5fe:	d1 80       	ldd	r13, Z+1	; 0x01
 600:	80 81       	ld	r24, Z
 602:	82 30       	cpi	r24, 0x02	; 2
 604:	48 f4       	brcc	.+18     	; 0x618 <__pack_f+0x2e>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a0 e1       	ldi	r26, 0x10	; 16
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e8 2a       	or	r14, r24
 610:	f9 2a       	or	r15, r25
 612:	0a 2b       	or	r16, r26
 614:	1b 2b       	or	r17, r27
 616:	a5 c0       	rjmp	.+330    	; 0x762 <__pack_f+0x178>
 618:	84 30       	cpi	r24, 0x04	; 4
 61a:	09 f4       	brne	.+2      	; 0x61e <__pack_f+0x34>
 61c:	9f c0       	rjmp	.+318    	; 0x75c <__pack_f+0x172>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	21 f4       	brne	.+8      	; 0x62a <__pack_f+0x40>
 622:	ee 24       	eor	r14, r14
 624:	ff 24       	eor	r15, r15
 626:	87 01       	movw	r16, r14
 628:	05 c0       	rjmp	.+10     	; 0x634 <__pack_f+0x4a>
 62a:	e1 14       	cp	r14, r1
 62c:	f1 04       	cpc	r15, r1
 62e:	01 05       	cpc	r16, r1
 630:	11 05       	cpc	r17, r1
 632:	19 f4       	brne	.+6      	; 0x63a <__pack_f+0x50>
 634:	e0 e0       	ldi	r30, 0x00	; 0
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	96 c0       	rjmp	.+300    	; 0x766 <__pack_f+0x17c>
 63a:	62 81       	ldd	r22, Z+2	; 0x02
 63c:	73 81       	ldd	r23, Z+3	; 0x03
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	62 38       	cpi	r22, 0x82	; 130
 642:	79 07       	cpc	r23, r25
 644:	0c f0       	brlt	.+2      	; 0x648 <__pack_f+0x5e>
 646:	5b c0       	rjmp	.+182    	; 0x6fe <__pack_f+0x114>
 648:	22 e8       	ldi	r18, 0x82	; 130
 64a:	3f ef       	ldi	r19, 0xFF	; 255
 64c:	26 1b       	sub	r18, r22
 64e:	37 0b       	sbc	r19, r23
 650:	2a 31       	cpi	r18, 0x1A	; 26
 652:	31 05       	cpc	r19, r1
 654:	2c f0       	brlt	.+10     	; 0x660 <__pack_f+0x76>
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	2a c0       	rjmp	.+84     	; 0x6b4 <__pack_f+0xca>
 660:	b8 01       	movw	r22, r16
 662:	a7 01       	movw	r20, r14
 664:	02 2e       	mov	r0, r18
 666:	04 c0       	rjmp	.+8      	; 0x670 <__pack_f+0x86>
 668:	76 95       	lsr	r23
 66a:	67 95       	ror	r22
 66c:	57 95       	ror	r21
 66e:	47 95       	ror	r20
 670:	0a 94       	dec	r0
 672:	d2 f7       	brpl	.-12     	; 0x668 <__pack_f+0x7e>
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	a0 e0       	ldi	r26, 0x00	; 0
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	04 c0       	rjmp	.+8      	; 0x686 <__pack_f+0x9c>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	2a 95       	dec	r18
 688:	d2 f7       	brpl	.-12     	; 0x67e <__pack_f+0x94>
 68a:	01 97       	sbiw	r24, 0x01	; 1
 68c:	a1 09       	sbc	r26, r1
 68e:	b1 09       	sbc	r27, r1
 690:	8e 21       	and	r24, r14
 692:	9f 21       	and	r25, r15
 694:	a0 23       	and	r26, r16
 696:	b1 23       	and	r27, r17
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	a1 05       	cpc	r26, r1
 69c:	b1 05       	cpc	r27, r1
 69e:	21 f0       	breq	.+8      	; 0x6a8 <__pack_f+0xbe>
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	a0 e0       	ldi	r26, 0x00	; 0
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	9a 01       	movw	r18, r20
 6aa:	ab 01       	movw	r20, r22
 6ac:	28 2b       	or	r18, r24
 6ae:	39 2b       	or	r19, r25
 6b0:	4a 2b       	or	r20, r26
 6b2:	5b 2b       	or	r21, r27
 6b4:	da 01       	movw	r26, r20
 6b6:	c9 01       	movw	r24, r18
 6b8:	8f 77       	andi	r24, 0x7F	; 127
 6ba:	90 70       	andi	r25, 0x00	; 0
 6bc:	a0 70       	andi	r26, 0x00	; 0
 6be:	b0 70       	andi	r27, 0x00	; 0
 6c0:	80 34       	cpi	r24, 0x40	; 64
 6c2:	91 05       	cpc	r25, r1
 6c4:	a1 05       	cpc	r26, r1
 6c6:	b1 05       	cpc	r27, r1
 6c8:	39 f4       	brne	.+14     	; 0x6d8 <__pack_f+0xee>
 6ca:	27 ff       	sbrs	r18, 7
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <__pack_f+0xf6>
 6ce:	20 5c       	subi	r18, 0xC0	; 192
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	4f 4f       	sbci	r20, 0xFF	; 255
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__pack_f+0xf6>
 6d8:	21 5c       	subi	r18, 0xC1	; 193
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	4f 4f       	sbci	r20, 0xFF	; 255
 6de:	5f 4f       	sbci	r21, 0xFF	; 255
 6e0:	e0 e0       	ldi	r30, 0x00	; 0
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	20 30       	cpi	r18, 0x00	; 0
 6e6:	a0 e0       	ldi	r26, 0x00	; 0
 6e8:	3a 07       	cpc	r19, r26
 6ea:	a0 e0       	ldi	r26, 0x00	; 0
 6ec:	4a 07       	cpc	r20, r26
 6ee:	a0 e4       	ldi	r26, 0x40	; 64
 6f0:	5a 07       	cpc	r21, r26
 6f2:	10 f0       	brcs	.+4      	; 0x6f8 <__pack_f+0x10e>
 6f4:	e1 e0       	ldi	r30, 0x01	; 1
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	79 01       	movw	r14, r18
 6fa:	8a 01       	movw	r16, r20
 6fc:	27 c0       	rjmp	.+78     	; 0x74c <__pack_f+0x162>
 6fe:	60 38       	cpi	r22, 0x80	; 128
 700:	71 05       	cpc	r23, r1
 702:	64 f5       	brge	.+88     	; 0x75c <__pack_f+0x172>
 704:	fb 01       	movw	r30, r22
 706:	e1 58       	subi	r30, 0x81	; 129
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	d8 01       	movw	r26, r16
 70c:	c7 01       	movw	r24, r14
 70e:	8f 77       	andi	r24, 0x7F	; 127
 710:	90 70       	andi	r25, 0x00	; 0
 712:	a0 70       	andi	r26, 0x00	; 0
 714:	b0 70       	andi	r27, 0x00	; 0
 716:	80 34       	cpi	r24, 0x40	; 64
 718:	91 05       	cpc	r25, r1
 71a:	a1 05       	cpc	r26, r1
 71c:	b1 05       	cpc	r27, r1
 71e:	39 f4       	brne	.+14     	; 0x72e <__pack_f+0x144>
 720:	e7 fe       	sbrs	r14, 7
 722:	0d c0       	rjmp	.+26     	; 0x73e <__pack_f+0x154>
 724:	80 e4       	ldi	r24, 0x40	; 64
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	04 c0       	rjmp	.+8      	; 0x736 <__pack_f+0x14c>
 72e:	8f e3       	ldi	r24, 0x3F	; 63
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	a0 e0       	ldi	r26, 0x00	; 0
 734:	b0 e0       	ldi	r27, 0x00	; 0
 736:	e8 0e       	add	r14, r24
 738:	f9 1e       	adc	r15, r25
 73a:	0a 1f       	adc	r16, r26
 73c:	1b 1f       	adc	r17, r27
 73e:	17 ff       	sbrs	r17, 7
 740:	05 c0       	rjmp	.+10     	; 0x74c <__pack_f+0x162>
 742:	16 95       	lsr	r17
 744:	07 95       	ror	r16
 746:	f7 94       	ror	r15
 748:	e7 94       	ror	r14
 74a:	31 96       	adiw	r30, 0x01	; 1
 74c:	87 e0       	ldi	r24, 0x07	; 7
 74e:	16 95       	lsr	r17
 750:	07 95       	ror	r16
 752:	f7 94       	ror	r15
 754:	e7 94       	ror	r14
 756:	8a 95       	dec	r24
 758:	d1 f7       	brne	.-12     	; 0x74e <__pack_f+0x164>
 75a:	05 c0       	rjmp	.+10     	; 0x766 <__pack_f+0x17c>
 75c:	ee 24       	eor	r14, r14
 75e:	ff 24       	eor	r15, r15
 760:	87 01       	movw	r16, r14
 762:	ef ef       	ldi	r30, 0xFF	; 255
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	6e 2f       	mov	r22, r30
 768:	67 95       	ror	r22
 76a:	66 27       	eor	r22, r22
 76c:	67 95       	ror	r22
 76e:	90 2f       	mov	r25, r16
 770:	9f 77       	andi	r25, 0x7F	; 127
 772:	d7 94       	ror	r13
 774:	dd 24       	eor	r13, r13
 776:	d7 94       	ror	r13
 778:	8e 2f       	mov	r24, r30
 77a:	86 95       	lsr	r24
 77c:	49 2f       	mov	r20, r25
 77e:	46 2b       	or	r20, r22
 780:	58 2f       	mov	r21, r24
 782:	5d 29       	or	r21, r13
 784:	b7 01       	movw	r22, r14
 786:	ca 01       	movw	r24, r20
 788:	1f 91       	pop	r17
 78a:	0f 91       	pop	r16
 78c:	ff 90       	pop	r15
 78e:	ef 90       	pop	r14
 790:	df 90       	pop	r13
 792:	08 95       	ret

00000794 <__unpack_f>:
 794:	fc 01       	movw	r30, r24
 796:	db 01       	movw	r26, r22
 798:	40 81       	ld	r20, Z
 79a:	51 81       	ldd	r21, Z+1	; 0x01
 79c:	22 81       	ldd	r18, Z+2	; 0x02
 79e:	62 2f       	mov	r22, r18
 7a0:	6f 77       	andi	r22, 0x7F	; 127
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	22 1f       	adc	r18, r18
 7a6:	22 27       	eor	r18, r18
 7a8:	22 1f       	adc	r18, r18
 7aa:	93 81       	ldd	r25, Z+3	; 0x03
 7ac:	89 2f       	mov	r24, r25
 7ae:	88 0f       	add	r24, r24
 7b0:	82 2b       	or	r24, r18
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	99 1f       	adc	r25, r25
 7b8:	99 27       	eor	r25, r25
 7ba:	99 1f       	adc	r25, r25
 7bc:	11 96       	adiw	r26, 0x01	; 1
 7be:	9c 93       	st	X, r25
 7c0:	11 97       	sbiw	r26, 0x01	; 1
 7c2:	21 15       	cp	r18, r1
 7c4:	31 05       	cpc	r19, r1
 7c6:	a9 f5       	brne	.+106    	; 0x832 <__unpack_f+0x9e>
 7c8:	41 15       	cp	r20, r1
 7ca:	51 05       	cpc	r21, r1
 7cc:	61 05       	cpc	r22, r1
 7ce:	71 05       	cpc	r23, r1
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__unpack_f+0x42>
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	37 c0       	rjmp	.+110    	; 0x844 <__unpack_f+0xb0>
 7d6:	82 e8       	ldi	r24, 0x82	; 130
 7d8:	9f ef       	ldi	r25, 0xFF	; 255
 7da:	13 96       	adiw	r26, 0x03	; 3
 7dc:	9c 93       	st	X, r25
 7de:	8e 93       	st	-X, r24
 7e0:	12 97       	sbiw	r26, 0x02	; 2
 7e2:	9a 01       	movw	r18, r20
 7e4:	ab 01       	movw	r20, r22
 7e6:	67 e0       	ldi	r22, 0x07	; 7
 7e8:	22 0f       	add	r18, r18
 7ea:	33 1f       	adc	r19, r19
 7ec:	44 1f       	adc	r20, r20
 7ee:	55 1f       	adc	r21, r21
 7f0:	6a 95       	dec	r22
 7f2:	d1 f7       	brne	.-12     	; 0x7e8 <__unpack_f+0x54>
 7f4:	83 e0       	ldi	r24, 0x03	; 3
 7f6:	8c 93       	st	X, r24
 7f8:	0d c0       	rjmp	.+26     	; 0x814 <__unpack_f+0x80>
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	44 1f       	adc	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	12 96       	adiw	r26, 0x02	; 2
 804:	8d 91       	ld	r24, X+
 806:	9c 91       	ld	r25, X
 808:	13 97       	sbiw	r26, 0x03	; 3
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	13 96       	adiw	r26, 0x03	; 3
 80e:	9c 93       	st	X, r25
 810:	8e 93       	st	-X, r24
 812:	12 97       	sbiw	r26, 0x02	; 2
 814:	20 30       	cpi	r18, 0x00	; 0
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	38 07       	cpc	r19, r24
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	48 07       	cpc	r20, r24
 81e:	80 e4       	ldi	r24, 0x40	; 64
 820:	58 07       	cpc	r21, r24
 822:	58 f3       	brcs	.-42     	; 0x7fa <__unpack_f+0x66>
 824:	14 96       	adiw	r26, 0x04	; 4
 826:	2d 93       	st	X+, r18
 828:	3d 93       	st	X+, r19
 82a:	4d 93       	st	X+, r20
 82c:	5c 93       	st	X, r21
 82e:	17 97       	sbiw	r26, 0x07	; 7
 830:	08 95       	ret
 832:	2f 3f       	cpi	r18, 0xFF	; 255
 834:	31 05       	cpc	r19, r1
 836:	79 f4       	brne	.+30     	; 0x856 <__unpack_f+0xc2>
 838:	41 15       	cp	r20, r1
 83a:	51 05       	cpc	r21, r1
 83c:	61 05       	cpc	r22, r1
 83e:	71 05       	cpc	r23, r1
 840:	19 f4       	brne	.+6      	; 0x848 <__unpack_f+0xb4>
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	8c 93       	st	X, r24
 846:	08 95       	ret
 848:	64 ff       	sbrs	r22, 4
 84a:	03 c0       	rjmp	.+6      	; 0x852 <__unpack_f+0xbe>
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	8c 93       	st	X, r24
 850:	12 c0       	rjmp	.+36     	; 0x876 <__unpack_f+0xe2>
 852:	1c 92       	st	X, r1
 854:	10 c0       	rjmp	.+32     	; 0x876 <__unpack_f+0xe2>
 856:	2f 57       	subi	r18, 0x7F	; 127
 858:	30 40       	sbci	r19, 0x00	; 0
 85a:	13 96       	adiw	r26, 0x03	; 3
 85c:	3c 93       	st	X, r19
 85e:	2e 93       	st	-X, r18
 860:	12 97       	sbiw	r26, 0x02	; 2
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	8c 93       	st	X, r24
 866:	87 e0       	ldi	r24, 0x07	; 7
 868:	44 0f       	add	r20, r20
 86a:	55 1f       	adc	r21, r21
 86c:	66 1f       	adc	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	8a 95       	dec	r24
 872:	d1 f7       	brne	.-12     	; 0x868 <__unpack_f+0xd4>
 874:	70 64       	ori	r23, 0x40	; 64
 876:	14 96       	adiw	r26, 0x04	; 4
 878:	4d 93       	st	X+, r20
 87a:	5d 93       	st	X+, r21
 87c:	6d 93       	st	X+, r22
 87e:	7c 93       	st	X, r23
 880:	17 97       	sbiw	r26, 0x07	; 7
 882:	08 95       	ret

00000884 <__prologue_saves__>:
 884:	2f 92       	push	r2
 886:	3f 92       	push	r3
 888:	4f 92       	push	r4
 88a:	5f 92       	push	r5
 88c:	6f 92       	push	r6
 88e:	7f 92       	push	r7
 890:	8f 92       	push	r8
 892:	9f 92       	push	r9
 894:	af 92       	push	r10
 896:	bf 92       	push	r11
 898:	cf 92       	push	r12
 89a:	df 92       	push	r13
 89c:	ef 92       	push	r14
 89e:	ff 92       	push	r15
 8a0:	0f 93       	push	r16
 8a2:	1f 93       	push	r17
 8a4:	cf 93       	push	r28
 8a6:	df 93       	push	r29
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
 8ac:	ca 1b       	sub	r28, r26
 8ae:	db 0b       	sbc	r29, r27
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	f8 94       	cli
 8b4:	de bf       	out	0x3e, r29	; 62
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	cd bf       	out	0x3d, r28	; 61
 8ba:	09 94       	ijmp

000008bc <__epilogue_restores__>:
 8bc:	2a 88       	ldd	r2, Y+18	; 0x12
 8be:	39 88       	ldd	r3, Y+17	; 0x11
 8c0:	48 88       	ldd	r4, Y+16	; 0x10
 8c2:	5f 84       	ldd	r5, Y+15	; 0x0f
 8c4:	6e 84       	ldd	r6, Y+14	; 0x0e
 8c6:	7d 84       	ldd	r7, Y+13	; 0x0d
 8c8:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ca:	9b 84       	ldd	r9, Y+11	; 0x0b
 8cc:	aa 84       	ldd	r10, Y+10	; 0x0a
 8ce:	b9 84       	ldd	r11, Y+9	; 0x09
 8d0:	c8 84       	ldd	r12, Y+8	; 0x08
 8d2:	df 80       	ldd	r13, Y+7	; 0x07
 8d4:	ee 80       	ldd	r14, Y+6	; 0x06
 8d6:	fd 80       	ldd	r15, Y+5	; 0x05
 8d8:	0c 81       	ldd	r16, Y+4	; 0x04
 8da:	1b 81       	ldd	r17, Y+3	; 0x03
 8dc:	aa 81       	ldd	r26, Y+2	; 0x02
 8de:	b9 81       	ldd	r27, Y+1	; 0x01
 8e0:	ce 0f       	add	r28, r30
 8e2:	d1 1d       	adc	r29, r1
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	f8 94       	cli
 8e8:	de bf       	out	0x3e, r29	; 62
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	cd bf       	out	0x3d, r28	; 61
 8ee:	ed 01       	movw	r28, r26
 8f0:	08 95       	ret

000008f2 <sprintf>:
 8f2:	ae e0       	ldi	r26, 0x0E	; 14
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ef e7       	ldi	r30, 0x7F	; 127
 8f8:	f4 e0       	ldi	r31, 0x04	; 4
 8fa:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__prologue_saves__+0x1c>
 8fe:	0d 89       	ldd	r16, Y+21	; 0x15
 900:	1e 89       	ldd	r17, Y+22	; 0x16
 902:	86 e0       	ldi	r24, 0x06	; 6
 904:	8c 83       	std	Y+4, r24	; 0x04
 906:	1a 83       	std	Y+2, r17	; 0x02
 908:	09 83       	std	Y+1, r16	; 0x01
 90a:	8f ef       	ldi	r24, 0xFF	; 255
 90c:	9f e7       	ldi	r25, 0x7F	; 127
 90e:	9e 83       	std	Y+6, r25	; 0x06
 910:	8d 83       	std	Y+5, r24	; 0x05
 912:	9e 01       	movw	r18, r28
 914:	27 5e       	subi	r18, 0xE7	; 231
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	ce 01       	movw	r24, r28
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	6f 89       	ldd	r22, Y+23	; 0x17
 91e:	78 8d       	ldd	r23, Y+24	; 0x18
 920:	a9 01       	movw	r20, r18
 922:	0e 94 9d 04 	call	0x93a	; 0x93a <vfprintf>
 926:	2f 81       	ldd	r18, Y+7	; 0x07
 928:	38 85       	ldd	r19, Y+8	; 0x08
 92a:	02 0f       	add	r16, r18
 92c:	13 1f       	adc	r17, r19
 92e:	f8 01       	movw	r30, r16
 930:	10 82       	st	Z, r1
 932:	2e 96       	adiw	r28, 0x0e	; 14
 934:	e4 e0       	ldi	r30, 0x04	; 4
 936:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__epilogue_restores__+0x1c>

0000093a <vfprintf>:
 93a:	ab e0       	ldi	r26, 0x0B	; 11
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e3 ea       	ldi	r30, 0xA3	; 163
 940:	f4 e0       	ldi	r31, 0x04	; 4
 942:	0c 94 42 04 	jmp	0x884	; 0x884 <__prologue_saves__>
 946:	3c 01       	movw	r6, r24
 948:	2b 01       	movw	r4, r22
 94a:	5a 01       	movw	r10, r20
 94c:	fc 01       	movw	r30, r24
 94e:	17 82       	std	Z+7, r1	; 0x07
 950:	16 82       	std	Z+6, r1	; 0x06
 952:	83 81       	ldd	r24, Z+3	; 0x03
 954:	81 fd       	sbrc	r24, 1
 956:	03 c0       	rjmp	.+6      	; 0x95e <vfprintf+0x24>
 958:	6f ef       	ldi	r22, 0xFF	; 255
 95a:	7f ef       	ldi	r23, 0xFF	; 255
 95c:	c6 c1       	rjmp	.+908    	; 0xcea <vfprintf+0x3b0>
 95e:	9a e0       	ldi	r25, 0x0A	; 10
 960:	89 2e       	mov	r8, r25
 962:	1e 01       	movw	r2, r28
 964:	08 94       	sec
 966:	21 1c       	adc	r2, r1
 968:	31 1c       	adc	r3, r1
 96a:	f3 01       	movw	r30, r6
 96c:	23 81       	ldd	r18, Z+3	; 0x03
 96e:	f2 01       	movw	r30, r4
 970:	23 fd       	sbrc	r18, 3
 972:	85 91       	lpm	r24, Z+
 974:	23 ff       	sbrs	r18, 3
 976:	81 91       	ld	r24, Z+
 978:	2f 01       	movw	r4, r30
 97a:	88 23       	and	r24, r24
 97c:	09 f4       	brne	.+2      	; 0x980 <vfprintf+0x46>
 97e:	b2 c1       	rjmp	.+868    	; 0xce4 <vfprintf+0x3aa>
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	39 f4       	brne	.+14     	; 0x992 <vfprintf+0x58>
 984:	23 fd       	sbrc	r18, 3
 986:	85 91       	lpm	r24, Z+
 988:	23 ff       	sbrs	r18, 3
 98a:	81 91       	ld	r24, Z+
 98c:	2f 01       	movw	r4, r30
 98e:	85 32       	cpi	r24, 0x25	; 37
 990:	29 f4       	brne	.+10     	; 0x99c <vfprintf+0x62>
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	b3 01       	movw	r22, r6
 996:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 99a:	e7 cf       	rjmp	.-50     	; 0x96a <vfprintf+0x30>
 99c:	98 2f       	mov	r25, r24
 99e:	ff 24       	eor	r15, r15
 9a0:	ee 24       	eor	r14, r14
 9a2:	99 24       	eor	r9, r9
 9a4:	ff e1       	ldi	r31, 0x1F	; 31
 9a6:	ff 15       	cp	r31, r15
 9a8:	d0 f0       	brcs	.+52     	; 0x9de <vfprintf+0xa4>
 9aa:	9b 32       	cpi	r25, 0x2B	; 43
 9ac:	69 f0       	breq	.+26     	; 0x9c8 <vfprintf+0x8e>
 9ae:	9c 32       	cpi	r25, 0x2C	; 44
 9b0:	28 f4       	brcc	.+10     	; 0x9bc <vfprintf+0x82>
 9b2:	90 32       	cpi	r25, 0x20	; 32
 9b4:	59 f0       	breq	.+22     	; 0x9cc <vfprintf+0x92>
 9b6:	93 32       	cpi	r25, 0x23	; 35
 9b8:	91 f4       	brne	.+36     	; 0x9de <vfprintf+0xa4>
 9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <vfprintf+0x9e>
 9bc:	9d 32       	cpi	r25, 0x2D	; 45
 9be:	49 f0       	breq	.+18     	; 0x9d2 <vfprintf+0x98>
 9c0:	90 33       	cpi	r25, 0x30	; 48
 9c2:	69 f4       	brne	.+26     	; 0x9de <vfprintf+0xa4>
 9c4:	41 e0       	ldi	r20, 0x01	; 1
 9c6:	24 c0       	rjmp	.+72     	; 0xa10 <vfprintf+0xd6>
 9c8:	52 e0       	ldi	r21, 0x02	; 2
 9ca:	f5 2a       	or	r15, r21
 9cc:	84 e0       	ldi	r24, 0x04	; 4
 9ce:	f8 2a       	or	r15, r24
 9d0:	28 c0       	rjmp	.+80     	; 0xa22 <vfprintf+0xe8>
 9d2:	98 e0       	ldi	r25, 0x08	; 8
 9d4:	f9 2a       	or	r15, r25
 9d6:	25 c0       	rjmp	.+74     	; 0xa22 <vfprintf+0xe8>
 9d8:	e0 e1       	ldi	r30, 0x10	; 16
 9da:	fe 2a       	or	r15, r30
 9dc:	22 c0       	rjmp	.+68     	; 0xa22 <vfprintf+0xe8>
 9de:	f7 fc       	sbrc	r15, 7
 9e0:	29 c0       	rjmp	.+82     	; 0xa34 <vfprintf+0xfa>
 9e2:	89 2f       	mov	r24, r25
 9e4:	80 53       	subi	r24, 0x30	; 48
 9e6:	8a 30       	cpi	r24, 0x0A	; 10
 9e8:	70 f4       	brcc	.+28     	; 0xa06 <vfprintf+0xcc>
 9ea:	f6 fe       	sbrs	r15, 6
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <vfprintf+0xbe>
 9ee:	98 9c       	mul	r9, r8
 9f0:	90 2c       	mov	r9, r0
 9f2:	11 24       	eor	r1, r1
 9f4:	98 0e       	add	r9, r24
 9f6:	15 c0       	rjmp	.+42     	; 0xa22 <vfprintf+0xe8>
 9f8:	e8 9c       	mul	r14, r8
 9fa:	e0 2c       	mov	r14, r0
 9fc:	11 24       	eor	r1, r1
 9fe:	e8 0e       	add	r14, r24
 a00:	f0 e2       	ldi	r31, 0x20	; 32
 a02:	ff 2a       	or	r15, r31
 a04:	0e c0       	rjmp	.+28     	; 0xa22 <vfprintf+0xe8>
 a06:	9e 32       	cpi	r25, 0x2E	; 46
 a08:	29 f4       	brne	.+10     	; 0xa14 <vfprintf+0xda>
 a0a:	f6 fc       	sbrc	r15, 6
 a0c:	6b c1       	rjmp	.+726    	; 0xce4 <vfprintf+0x3aa>
 a0e:	40 e4       	ldi	r20, 0x40	; 64
 a10:	f4 2a       	or	r15, r20
 a12:	07 c0       	rjmp	.+14     	; 0xa22 <vfprintf+0xe8>
 a14:	9c 36       	cpi	r25, 0x6C	; 108
 a16:	19 f4       	brne	.+6      	; 0xa1e <vfprintf+0xe4>
 a18:	50 e8       	ldi	r21, 0x80	; 128
 a1a:	f5 2a       	or	r15, r21
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <vfprintf+0xe8>
 a1e:	98 36       	cpi	r25, 0x68	; 104
 a20:	49 f4       	brne	.+18     	; 0xa34 <vfprintf+0xfa>
 a22:	f2 01       	movw	r30, r4
 a24:	23 fd       	sbrc	r18, 3
 a26:	95 91       	lpm	r25, Z+
 a28:	23 ff       	sbrs	r18, 3
 a2a:	91 91       	ld	r25, Z+
 a2c:	2f 01       	movw	r4, r30
 a2e:	99 23       	and	r25, r25
 a30:	09 f0       	breq	.+2      	; 0xa34 <vfprintf+0xfa>
 a32:	b8 cf       	rjmp	.-144    	; 0x9a4 <vfprintf+0x6a>
 a34:	89 2f       	mov	r24, r25
 a36:	85 54       	subi	r24, 0x45	; 69
 a38:	83 30       	cpi	r24, 0x03	; 3
 a3a:	18 f0       	brcs	.+6      	; 0xa42 <vfprintf+0x108>
 a3c:	80 52       	subi	r24, 0x20	; 32
 a3e:	83 30       	cpi	r24, 0x03	; 3
 a40:	38 f4       	brcc	.+14     	; 0xa50 <vfprintf+0x116>
 a42:	44 e0       	ldi	r20, 0x04	; 4
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	a4 0e       	add	r10, r20
 a48:	b5 1e       	adc	r11, r21
 a4a:	5f e3       	ldi	r21, 0x3F	; 63
 a4c:	59 83       	std	Y+1, r21	; 0x01
 a4e:	0f c0       	rjmp	.+30     	; 0xa6e <vfprintf+0x134>
 a50:	93 36       	cpi	r25, 0x63	; 99
 a52:	31 f0       	breq	.+12     	; 0xa60 <vfprintf+0x126>
 a54:	93 37       	cpi	r25, 0x73	; 115
 a56:	79 f0       	breq	.+30     	; 0xa76 <vfprintf+0x13c>
 a58:	93 35       	cpi	r25, 0x53	; 83
 a5a:	09 f0       	breq	.+2      	; 0xa5e <vfprintf+0x124>
 a5c:	56 c0       	rjmp	.+172    	; 0xb0a <vfprintf+0x1d0>
 a5e:	20 c0       	rjmp	.+64     	; 0xaa0 <vfprintf+0x166>
 a60:	f5 01       	movw	r30, r10
 a62:	80 81       	ld	r24, Z
 a64:	89 83       	std	Y+1, r24	; 0x01
 a66:	42 e0       	ldi	r20, 0x02	; 2
 a68:	50 e0       	ldi	r21, 0x00	; 0
 a6a:	a4 0e       	add	r10, r20
 a6c:	b5 1e       	adc	r11, r21
 a6e:	61 01       	movw	r12, r2
 a70:	01 e0       	ldi	r16, 0x01	; 1
 a72:	10 e0       	ldi	r17, 0x00	; 0
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <vfprintf+0x160>
 a76:	f5 01       	movw	r30, r10
 a78:	c0 80       	ld	r12, Z
 a7a:	d1 80       	ldd	r13, Z+1	; 0x01
 a7c:	f6 fc       	sbrc	r15, 6
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <vfprintf+0x14c>
 a80:	6f ef       	ldi	r22, 0xFF	; 255
 a82:	7f ef       	ldi	r23, 0xFF	; 255
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <vfprintf+0x150>
 a86:	69 2d       	mov	r22, r9
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	42 e0       	ldi	r20, 0x02	; 2
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	a4 0e       	add	r10, r20
 a90:	b5 1e       	adc	r11, r21
 a92:	c6 01       	movw	r24, r12
 a94:	0e 94 85 06 	call	0xd0a	; 0xd0a <strnlen>
 a98:	8c 01       	movw	r16, r24
 a9a:	5f e7       	ldi	r21, 0x7F	; 127
 a9c:	f5 22       	and	r15, r21
 a9e:	14 c0       	rjmp	.+40     	; 0xac8 <vfprintf+0x18e>
 aa0:	f5 01       	movw	r30, r10
 aa2:	c0 80       	ld	r12, Z
 aa4:	d1 80       	ldd	r13, Z+1	; 0x01
 aa6:	f6 fc       	sbrc	r15, 6
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <vfprintf+0x176>
 aaa:	6f ef       	ldi	r22, 0xFF	; 255
 aac:	7f ef       	ldi	r23, 0xFF	; 255
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <vfprintf+0x17a>
 ab0:	69 2d       	mov	r22, r9
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	42 e0       	ldi	r20, 0x02	; 2
 ab6:	50 e0       	ldi	r21, 0x00	; 0
 ab8:	a4 0e       	add	r10, r20
 aba:	b5 1e       	adc	r11, r21
 abc:	c6 01       	movw	r24, r12
 abe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strnlen_P>
 ac2:	8c 01       	movw	r16, r24
 ac4:	50 e8       	ldi	r21, 0x80	; 128
 ac6:	f5 2a       	or	r15, r21
 ac8:	f3 fe       	sbrs	r15, 3
 aca:	07 c0       	rjmp	.+14     	; 0xada <vfprintf+0x1a0>
 acc:	1a c0       	rjmp	.+52     	; 0xb02 <vfprintf+0x1c8>
 ace:	80 e2       	ldi	r24, 0x20	; 32
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	b3 01       	movw	r22, r6
 ad4:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 ad8:	ea 94       	dec	r14
 ada:	8e 2d       	mov	r24, r14
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	08 17       	cp	r16, r24
 ae0:	19 07       	cpc	r17, r25
 ae2:	a8 f3       	brcs	.-22     	; 0xace <vfprintf+0x194>
 ae4:	0e c0       	rjmp	.+28     	; 0xb02 <vfprintf+0x1c8>
 ae6:	f6 01       	movw	r30, r12
 ae8:	f7 fc       	sbrc	r15, 7
 aea:	85 91       	lpm	r24, Z+
 aec:	f7 fe       	sbrs	r15, 7
 aee:	81 91       	ld	r24, Z+
 af0:	6f 01       	movw	r12, r30
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	b3 01       	movw	r22, r6
 af6:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 afa:	e1 10       	cpse	r14, r1
 afc:	ea 94       	dec	r14
 afe:	01 50       	subi	r16, 0x01	; 1
 b00:	10 40       	sbci	r17, 0x00	; 0
 b02:	01 15       	cp	r16, r1
 b04:	11 05       	cpc	r17, r1
 b06:	79 f7       	brne	.-34     	; 0xae6 <vfprintf+0x1ac>
 b08:	ea c0       	rjmp	.+468    	; 0xcde <vfprintf+0x3a4>
 b0a:	94 36       	cpi	r25, 0x64	; 100
 b0c:	11 f0       	breq	.+4      	; 0xb12 <vfprintf+0x1d8>
 b0e:	99 36       	cpi	r25, 0x69	; 105
 b10:	69 f5       	brne	.+90     	; 0xb6c <vfprintf+0x232>
 b12:	f7 fe       	sbrs	r15, 7
 b14:	08 c0       	rjmp	.+16     	; 0xb26 <vfprintf+0x1ec>
 b16:	f5 01       	movw	r30, r10
 b18:	20 81       	ld	r18, Z
 b1a:	31 81       	ldd	r19, Z+1	; 0x01
 b1c:	42 81       	ldd	r20, Z+2	; 0x02
 b1e:	53 81       	ldd	r21, Z+3	; 0x03
 b20:	84 e0       	ldi	r24, 0x04	; 4
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0a c0       	rjmp	.+20     	; 0xb3a <vfprintf+0x200>
 b26:	f5 01       	movw	r30, r10
 b28:	80 81       	ld	r24, Z
 b2a:	91 81       	ldd	r25, Z+1	; 0x01
 b2c:	9c 01       	movw	r18, r24
 b2e:	44 27       	eor	r20, r20
 b30:	37 fd       	sbrc	r19, 7
 b32:	40 95       	com	r20
 b34:	54 2f       	mov	r21, r20
 b36:	82 e0       	ldi	r24, 0x02	; 2
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	a8 0e       	add	r10, r24
 b3c:	b9 1e       	adc	r11, r25
 b3e:	9f e6       	ldi	r25, 0x6F	; 111
 b40:	f9 22       	and	r15, r25
 b42:	57 ff       	sbrs	r21, 7
 b44:	09 c0       	rjmp	.+18     	; 0xb58 <vfprintf+0x21e>
 b46:	50 95       	com	r21
 b48:	40 95       	com	r20
 b4a:	30 95       	com	r19
 b4c:	21 95       	neg	r18
 b4e:	3f 4f       	sbci	r19, 0xFF	; 255
 b50:	4f 4f       	sbci	r20, 0xFF	; 255
 b52:	5f 4f       	sbci	r21, 0xFF	; 255
 b54:	e0 e8       	ldi	r30, 0x80	; 128
 b56:	fe 2a       	or	r15, r30
 b58:	ca 01       	movw	r24, r20
 b5a:	b9 01       	movw	r22, r18
 b5c:	a1 01       	movw	r20, r2
 b5e:	2a e0       	ldi	r18, 0x0A	; 10
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	0e 94 bc 06 	call	0xd78	; 0xd78 <__ultoa_invert>
 b66:	d8 2e       	mov	r13, r24
 b68:	d2 18       	sub	r13, r2
 b6a:	40 c0       	rjmp	.+128    	; 0xbec <vfprintf+0x2b2>
 b6c:	95 37       	cpi	r25, 0x75	; 117
 b6e:	29 f4       	brne	.+10     	; 0xb7a <vfprintf+0x240>
 b70:	1f 2d       	mov	r17, r15
 b72:	1f 7e       	andi	r17, 0xEF	; 239
 b74:	2a e0       	ldi	r18, 0x0A	; 10
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	1d c0       	rjmp	.+58     	; 0xbb4 <vfprintf+0x27a>
 b7a:	1f 2d       	mov	r17, r15
 b7c:	19 7f       	andi	r17, 0xF9	; 249
 b7e:	9f 36       	cpi	r25, 0x6F	; 111
 b80:	61 f0       	breq	.+24     	; 0xb9a <vfprintf+0x260>
 b82:	90 37       	cpi	r25, 0x70	; 112
 b84:	20 f4       	brcc	.+8      	; 0xb8e <vfprintf+0x254>
 b86:	98 35       	cpi	r25, 0x58	; 88
 b88:	09 f0       	breq	.+2      	; 0xb8c <vfprintf+0x252>
 b8a:	ac c0       	rjmp	.+344    	; 0xce4 <vfprintf+0x3aa>
 b8c:	0f c0       	rjmp	.+30     	; 0xbac <vfprintf+0x272>
 b8e:	90 37       	cpi	r25, 0x70	; 112
 b90:	39 f0       	breq	.+14     	; 0xba0 <vfprintf+0x266>
 b92:	98 37       	cpi	r25, 0x78	; 120
 b94:	09 f0       	breq	.+2      	; 0xb98 <vfprintf+0x25e>
 b96:	a6 c0       	rjmp	.+332    	; 0xce4 <vfprintf+0x3aa>
 b98:	04 c0       	rjmp	.+8      	; 0xba2 <vfprintf+0x268>
 b9a:	28 e0       	ldi	r18, 0x08	; 8
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <vfprintf+0x27a>
 ba0:	10 61       	ori	r17, 0x10	; 16
 ba2:	14 fd       	sbrc	r17, 4
 ba4:	14 60       	ori	r17, 0x04	; 4
 ba6:	20 e1       	ldi	r18, 0x10	; 16
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <vfprintf+0x27a>
 bac:	14 fd       	sbrc	r17, 4
 bae:	16 60       	ori	r17, 0x06	; 6
 bb0:	20 e1       	ldi	r18, 0x10	; 16
 bb2:	32 e0       	ldi	r19, 0x02	; 2
 bb4:	17 ff       	sbrs	r17, 7
 bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <vfprintf+0x28e>
 bb8:	f5 01       	movw	r30, r10
 bba:	60 81       	ld	r22, Z
 bbc:	71 81       	ldd	r23, Z+1	; 0x01
 bbe:	82 81       	ldd	r24, Z+2	; 0x02
 bc0:	93 81       	ldd	r25, Z+3	; 0x03
 bc2:	44 e0       	ldi	r20, 0x04	; 4
 bc4:	50 e0       	ldi	r21, 0x00	; 0
 bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <vfprintf+0x29e>
 bc8:	f5 01       	movw	r30, r10
 bca:	80 81       	ld	r24, Z
 bcc:	91 81       	ldd	r25, Z+1	; 0x01
 bce:	bc 01       	movw	r22, r24
 bd0:	80 e0       	ldi	r24, 0x00	; 0
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	42 e0       	ldi	r20, 0x02	; 2
 bd6:	50 e0       	ldi	r21, 0x00	; 0
 bd8:	a4 0e       	add	r10, r20
 bda:	b5 1e       	adc	r11, r21
 bdc:	a1 01       	movw	r20, r2
 bde:	0e 94 bc 06 	call	0xd78	; 0xd78 <__ultoa_invert>
 be2:	d8 2e       	mov	r13, r24
 be4:	d2 18       	sub	r13, r2
 be6:	8f e7       	ldi	r24, 0x7F	; 127
 be8:	f8 2e       	mov	r15, r24
 bea:	f1 22       	and	r15, r17
 bec:	f6 fe       	sbrs	r15, 6
 bee:	0b c0       	rjmp	.+22     	; 0xc06 <vfprintf+0x2cc>
 bf0:	5e ef       	ldi	r21, 0xFE	; 254
 bf2:	f5 22       	and	r15, r21
 bf4:	d9 14       	cp	r13, r9
 bf6:	38 f4       	brcc	.+14     	; 0xc06 <vfprintf+0x2cc>
 bf8:	f4 fe       	sbrs	r15, 4
 bfa:	07 c0       	rjmp	.+14     	; 0xc0a <vfprintf+0x2d0>
 bfc:	f2 fc       	sbrc	r15, 2
 bfe:	05 c0       	rjmp	.+10     	; 0xc0a <vfprintf+0x2d0>
 c00:	8f ee       	ldi	r24, 0xEF	; 239
 c02:	f8 22       	and	r15, r24
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <vfprintf+0x2d0>
 c06:	1d 2d       	mov	r17, r13
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <vfprintf+0x2d2>
 c0a:	19 2d       	mov	r17, r9
 c0c:	f4 fe       	sbrs	r15, 4
 c0e:	0d c0       	rjmp	.+26     	; 0xc2a <vfprintf+0x2f0>
 c10:	fe 01       	movw	r30, r28
 c12:	ed 0d       	add	r30, r13
 c14:	f1 1d       	adc	r31, r1
 c16:	80 81       	ld	r24, Z
 c18:	80 33       	cpi	r24, 0x30	; 48
 c1a:	19 f4       	brne	.+6      	; 0xc22 <vfprintf+0x2e8>
 c1c:	99 ee       	ldi	r25, 0xE9	; 233
 c1e:	f9 22       	and	r15, r25
 c20:	08 c0       	rjmp	.+16     	; 0xc32 <vfprintf+0x2f8>
 c22:	1f 5f       	subi	r17, 0xFF	; 255
 c24:	f2 fe       	sbrs	r15, 2
 c26:	05 c0       	rjmp	.+10     	; 0xc32 <vfprintf+0x2f8>
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <vfprintf+0x2f6>
 c2a:	8f 2d       	mov	r24, r15
 c2c:	86 78       	andi	r24, 0x86	; 134
 c2e:	09 f0       	breq	.+2      	; 0xc32 <vfprintf+0x2f8>
 c30:	1f 5f       	subi	r17, 0xFF	; 255
 c32:	0f 2d       	mov	r16, r15
 c34:	f3 fc       	sbrc	r15, 3
 c36:	14 c0       	rjmp	.+40     	; 0xc60 <vfprintf+0x326>
 c38:	f0 fe       	sbrs	r15, 0
 c3a:	0f c0       	rjmp	.+30     	; 0xc5a <vfprintf+0x320>
 c3c:	1e 15       	cp	r17, r14
 c3e:	10 f0       	brcs	.+4      	; 0xc44 <vfprintf+0x30a>
 c40:	9d 2c       	mov	r9, r13
 c42:	0b c0       	rjmp	.+22     	; 0xc5a <vfprintf+0x320>
 c44:	9d 2c       	mov	r9, r13
 c46:	9e 0c       	add	r9, r14
 c48:	91 1a       	sub	r9, r17
 c4a:	1e 2d       	mov	r17, r14
 c4c:	06 c0       	rjmp	.+12     	; 0xc5a <vfprintf+0x320>
 c4e:	80 e2       	ldi	r24, 0x20	; 32
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	b3 01       	movw	r22, r6
 c54:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 c58:	1f 5f       	subi	r17, 0xFF	; 255
 c5a:	1e 15       	cp	r17, r14
 c5c:	c0 f3       	brcs	.-16     	; 0xc4e <vfprintf+0x314>
 c5e:	04 c0       	rjmp	.+8      	; 0xc68 <vfprintf+0x32e>
 c60:	1e 15       	cp	r17, r14
 c62:	10 f4       	brcc	.+4      	; 0xc68 <vfprintf+0x32e>
 c64:	e1 1a       	sub	r14, r17
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <vfprintf+0x330>
 c68:	ee 24       	eor	r14, r14
 c6a:	04 ff       	sbrs	r16, 4
 c6c:	0f c0       	rjmp	.+30     	; 0xc8c <vfprintf+0x352>
 c6e:	80 e3       	ldi	r24, 0x30	; 48
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	b3 01       	movw	r22, r6
 c74:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 c78:	02 ff       	sbrs	r16, 2
 c7a:	1d c0       	rjmp	.+58     	; 0xcb6 <vfprintf+0x37c>
 c7c:	01 fd       	sbrc	r16, 1
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <vfprintf+0x34c>
 c80:	88 e7       	ldi	r24, 0x78	; 120
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e c0       	rjmp	.+28     	; 0xca2 <vfprintf+0x368>
 c86:	88 e5       	ldi	r24, 0x58	; 88
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0b c0       	rjmp	.+22     	; 0xca2 <vfprintf+0x368>
 c8c:	80 2f       	mov	r24, r16
 c8e:	86 78       	andi	r24, 0x86	; 134
 c90:	91 f0       	breq	.+36     	; 0xcb6 <vfprintf+0x37c>
 c92:	01 ff       	sbrs	r16, 1
 c94:	02 c0       	rjmp	.+4      	; 0xc9a <vfprintf+0x360>
 c96:	8b e2       	ldi	r24, 0x2B	; 43
 c98:	01 c0       	rjmp	.+2      	; 0xc9c <vfprintf+0x362>
 c9a:	80 e2       	ldi	r24, 0x20	; 32
 c9c:	f7 fc       	sbrc	r15, 7
 c9e:	8d e2       	ldi	r24, 0x2D	; 45
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	b3 01       	movw	r22, r6
 ca4:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x37c>
 caa:	80 e3       	ldi	r24, 0x30	; 48
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	b3 01       	movw	r22, r6
 cb0:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 cb4:	9a 94       	dec	r9
 cb6:	d9 14       	cp	r13, r9
 cb8:	c0 f3       	brcs	.-16     	; 0xcaa <vfprintf+0x370>
 cba:	da 94       	dec	r13
 cbc:	f1 01       	movw	r30, r2
 cbe:	ed 0d       	add	r30, r13
 cc0:	f1 1d       	adc	r31, r1
 cc2:	80 81       	ld	r24, Z
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	b3 01       	movw	r22, r6
 cc8:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 ccc:	dd 20       	and	r13, r13
 cce:	a9 f7       	brne	.-22     	; 0xcba <vfprintf+0x380>
 cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x3a4>
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	b3 01       	movw	r22, r6
 cd8:	0e 94 90 06 	call	0xd20	; 0xd20 <fputc>
 cdc:	ea 94       	dec	r14
 cde:	ee 20       	and	r14, r14
 ce0:	c1 f7       	brne	.-16     	; 0xcd2 <vfprintf+0x398>
 ce2:	43 ce       	rjmp	.-890    	; 0x96a <vfprintf+0x30>
 ce4:	f3 01       	movw	r30, r6
 ce6:	66 81       	ldd	r22, Z+6	; 0x06
 ce8:	77 81       	ldd	r23, Z+7	; 0x07
 cea:	cb 01       	movw	r24, r22
 cec:	2b 96       	adiw	r28, 0x0b	; 11
 cee:	e2 e1       	ldi	r30, 0x12	; 18
 cf0:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__epilogue_restores__>

00000cf4 <strnlen_P>:
 cf4:	fc 01       	movw	r30, r24
 cf6:	05 90       	lpm	r0, Z+
 cf8:	61 50       	subi	r22, 0x01	; 1
 cfa:	70 40       	sbci	r23, 0x00	; 0
 cfc:	01 10       	cpse	r0, r1
 cfe:	d8 f7       	brcc	.-10     	; 0xcf6 <strnlen_P+0x2>
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	8e 0f       	add	r24, r30
 d06:	9f 1f       	adc	r25, r31
 d08:	08 95       	ret

00000d0a <strnlen>:
 d0a:	fc 01       	movw	r30, r24
 d0c:	61 50       	subi	r22, 0x01	; 1
 d0e:	70 40       	sbci	r23, 0x00	; 0
 d10:	01 90       	ld	r0, Z+
 d12:	01 10       	cpse	r0, r1
 d14:	d8 f7       	brcc	.-10     	; 0xd0c <strnlen+0x2>
 d16:	80 95       	com	r24
 d18:	90 95       	com	r25
 d1a:	8e 0f       	add	r24, r30
 d1c:	9f 1f       	adc	r25, r31
 d1e:	08 95       	ret

00000d20 <fputc>:
 d20:	0f 93       	push	r16
 d22:	1f 93       	push	r17
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
 d28:	8c 01       	movw	r16, r24
 d2a:	eb 01       	movw	r28, r22
 d2c:	8b 81       	ldd	r24, Y+3	; 0x03
 d2e:	81 ff       	sbrs	r24, 1
 d30:	1b c0       	rjmp	.+54     	; 0xd68 <fputc+0x48>
 d32:	82 ff       	sbrs	r24, 2
 d34:	0d c0       	rjmp	.+26     	; 0xd50 <fputc+0x30>
 d36:	2e 81       	ldd	r18, Y+6	; 0x06
 d38:	3f 81       	ldd	r19, Y+7	; 0x07
 d3a:	8c 81       	ldd	r24, Y+4	; 0x04
 d3c:	9d 81       	ldd	r25, Y+5	; 0x05
 d3e:	28 17       	cp	r18, r24
 d40:	39 07       	cpc	r19, r25
 d42:	64 f4       	brge	.+24     	; 0xd5c <fputc+0x3c>
 d44:	e8 81       	ld	r30, Y
 d46:	f9 81       	ldd	r31, Y+1	; 0x01
 d48:	01 93       	st	Z+, r16
 d4a:	f9 83       	std	Y+1, r31	; 0x01
 d4c:	e8 83       	st	Y, r30
 d4e:	06 c0       	rjmp	.+12     	; 0xd5c <fputc+0x3c>
 d50:	e8 85       	ldd	r30, Y+8	; 0x08
 d52:	f9 85       	ldd	r31, Y+9	; 0x09
 d54:	80 2f       	mov	r24, r16
 d56:	09 95       	icall
 d58:	89 2b       	or	r24, r25
 d5a:	31 f4       	brne	.+12     	; 0xd68 <fputc+0x48>
 d5c:	8e 81       	ldd	r24, Y+6	; 0x06
 d5e:	9f 81       	ldd	r25, Y+7	; 0x07
 d60:	01 96       	adiw	r24, 0x01	; 1
 d62:	9f 83       	std	Y+7, r25	; 0x07
 d64:	8e 83       	std	Y+6, r24	; 0x06
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <fputc+0x4c>
 d68:	0f ef       	ldi	r16, 0xFF	; 255
 d6a:	1f ef       	ldi	r17, 0xFF	; 255
 d6c:	c8 01       	movw	r24, r16
 d6e:	df 91       	pop	r29
 d70:	cf 91       	pop	r28
 d72:	1f 91       	pop	r17
 d74:	0f 91       	pop	r16
 d76:	08 95       	ret

00000d78 <__ultoa_invert>:
 d78:	fa 01       	movw	r30, r20
 d7a:	aa 27       	eor	r26, r26
 d7c:	28 30       	cpi	r18, 0x08	; 8
 d7e:	51 f1       	breq	.+84     	; 0xdd4 <__ultoa_invert+0x5c>
 d80:	20 31       	cpi	r18, 0x10	; 16
 d82:	81 f1       	breq	.+96     	; 0xde4 <__ultoa_invert+0x6c>
 d84:	e8 94       	clt
 d86:	6f 93       	push	r22
 d88:	6e 7f       	andi	r22, 0xFE	; 254
 d8a:	6e 5f       	subi	r22, 0xFE	; 254
 d8c:	7f 4f       	sbci	r23, 0xFF	; 255
 d8e:	8f 4f       	sbci	r24, 0xFF	; 255
 d90:	9f 4f       	sbci	r25, 0xFF	; 255
 d92:	af 4f       	sbci	r26, 0xFF	; 255
 d94:	b1 e0       	ldi	r27, 0x01	; 1
 d96:	3e d0       	rcall	.+124    	; 0xe14 <__ultoa_invert+0x9c>
 d98:	b4 e0       	ldi	r27, 0x04	; 4
 d9a:	3c d0       	rcall	.+120    	; 0xe14 <__ultoa_invert+0x9c>
 d9c:	67 0f       	add	r22, r23
 d9e:	78 1f       	adc	r23, r24
 da0:	89 1f       	adc	r24, r25
 da2:	9a 1f       	adc	r25, r26
 da4:	a1 1d       	adc	r26, r1
 da6:	68 0f       	add	r22, r24
 da8:	79 1f       	adc	r23, r25
 daa:	8a 1f       	adc	r24, r26
 dac:	91 1d       	adc	r25, r1
 dae:	a1 1d       	adc	r26, r1
 db0:	6a 0f       	add	r22, r26
 db2:	71 1d       	adc	r23, r1
 db4:	81 1d       	adc	r24, r1
 db6:	91 1d       	adc	r25, r1
 db8:	a1 1d       	adc	r26, r1
 dba:	20 d0       	rcall	.+64     	; 0xdfc <__ultoa_invert+0x84>
 dbc:	09 f4       	brne	.+2      	; 0xdc0 <__ultoa_invert+0x48>
 dbe:	68 94       	set
 dc0:	3f 91       	pop	r19
 dc2:	2a e0       	ldi	r18, 0x0A	; 10
 dc4:	26 9f       	mul	r18, r22
 dc6:	11 24       	eor	r1, r1
 dc8:	30 19       	sub	r19, r0
 dca:	30 5d       	subi	r19, 0xD0	; 208
 dcc:	31 93       	st	Z+, r19
 dce:	de f6       	brtc	.-74     	; 0xd86 <__ultoa_invert+0xe>
 dd0:	cf 01       	movw	r24, r30
 dd2:	08 95       	ret
 dd4:	46 2f       	mov	r20, r22
 dd6:	47 70       	andi	r20, 0x07	; 7
 dd8:	40 5d       	subi	r20, 0xD0	; 208
 dda:	41 93       	st	Z+, r20
 ddc:	b3 e0       	ldi	r27, 0x03	; 3
 dde:	0f d0       	rcall	.+30     	; 0xdfe <__ultoa_invert+0x86>
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <__ultoa_invert+0x5c>
 de2:	f6 cf       	rjmp	.-20     	; 0xdd0 <__ultoa_invert+0x58>
 de4:	46 2f       	mov	r20, r22
 de6:	4f 70       	andi	r20, 0x0F	; 15
 de8:	40 5d       	subi	r20, 0xD0	; 208
 dea:	4a 33       	cpi	r20, 0x3A	; 58
 dec:	18 f0       	brcs	.+6      	; 0xdf4 <__ultoa_invert+0x7c>
 dee:	49 5d       	subi	r20, 0xD9	; 217
 df0:	31 fd       	sbrc	r19, 1
 df2:	40 52       	subi	r20, 0x20	; 32
 df4:	41 93       	st	Z+, r20
 df6:	02 d0       	rcall	.+4      	; 0xdfc <__ultoa_invert+0x84>
 df8:	a9 f7       	brne	.-22     	; 0xde4 <__ultoa_invert+0x6c>
 dfa:	ea cf       	rjmp	.-44     	; 0xdd0 <__ultoa_invert+0x58>
 dfc:	b4 e0       	ldi	r27, 0x04	; 4
 dfe:	a6 95       	lsr	r26
 e00:	97 95       	ror	r25
 e02:	87 95       	ror	r24
 e04:	77 95       	ror	r23
 e06:	67 95       	ror	r22
 e08:	ba 95       	dec	r27
 e0a:	c9 f7       	brne	.-14     	; 0xdfe <__ultoa_invert+0x86>
 e0c:	00 97       	sbiw	r24, 0x00	; 0
 e0e:	61 05       	cpc	r22, r1
 e10:	71 05       	cpc	r23, r1
 e12:	08 95       	ret
 e14:	9b 01       	movw	r18, r22
 e16:	ac 01       	movw	r20, r24
 e18:	0a 2e       	mov	r0, r26
 e1a:	06 94       	lsr	r0
 e1c:	57 95       	ror	r21
 e1e:	47 95       	ror	r20
 e20:	37 95       	ror	r19
 e22:	27 95       	ror	r18
 e24:	ba 95       	dec	r27
 e26:	c9 f7       	brne	.-14     	; 0xe1a <__ultoa_invert+0xa2>
 e28:	62 0f       	add	r22, r18
 e2a:	73 1f       	adc	r23, r19
 e2c:	84 1f       	adc	r24, r20
 e2e:	95 1f       	adc	r25, r21
 e30:	a0 1d       	adc	r26, r0
 e32:	08 95       	ret

00000e34 <_exit>:
 e34:	f8 94       	cli

00000e36 <__stop_program>:
 e36:	ff cf       	rjmp	.-2      	; 0xe36 <__stop_program>
